3...
#include<stdio.h>  
#include<string.h>  
   int main()  
   {  
       char gram[20],part1[20],part2[20],modifiedGram[20],newGram[20],tempGram[20];  
       int i,j=0,k=0,l=0,pos;  
       printf("Enter Production : S->");  
       gets(gram);  
       for(i=0;gram[i]!='|';i++,j++)  
            part1[j]=gram[i];  
       part1[j]='\0';  
       for(j=++i,i=0;gram[j]!='\0';j++,i++)  
            part2[i]=gram[j];  
       part2[i]='\0';  
       for(i=0;i<strlen(part1)||i<strlen(part2);i++)  
       {  
            if(part1[i]==part2[i])  
            {  
                 modifiedGram[k]=part1[i];  
                 k++;  
                 pos=i+1;  
            }  
       }  
       for(i=pos,j=0;part1[i]!='\0';i++,j++){  
            newGram[j]=part1[i];  
       }  
       newGram[j++]='|';  
       for(i=pos;part2[i]!='\0';i++,j++){  
            newGram[j]=part2[i];  
       }  
       modifiedGram[k]='X';  
       modifiedGram[++k]='\0';  
       newGram[j]='\0';  
       printf("\n S->%s",modifiedGram);  
       printf("\n X->%s\n",newGram);  
  }  



1....
%{
    int vow_count=0;
    int const_count =0;
%}
 
%%
[aeiouAEIOU] {vow_count++;}
[a-zA-Z] {const_count++;}
%%
int yywrap(){}
int main()
{
    printf("Enter the string of vowels and consonants:");
    yylex();
    printf("Number of vowels are:  %d\n", vow_count);
    printf("Number of consonants are:  %d\n", const_count);
    return 0;
}


2...
%%
((0[1-9])|([1-2][0-9])|(3[0-1]))\/((0[1-9])|(1[0-2]))\/(19[0-9]{2}|2[0-9]{3}) printf("Valid DoB");
.* printf("Invalid DoB");
%%

int main()
{
 yylex();
 return 0;
}
int yywrap()
{}

4..
#include<stdio.h>  
#include<string.h>  
#define SIZE 10  
  int main () {  
       char non_terminal;  
       char beta,alpha;  
       int num;  
       char production[10][SIZE];  
       int index=3; /* starting of the string following "->" */  
       printf("Enter Number of Production : ");  
       scanf("%d",&num);  
       printf("Enter the grammar as E->E-A :\n");  
       for(int i=0;i<num;i++){  
            scanf("%s",production[i]);  
       }  
       for(int i=0;i<num;i++){  
            printf("\nGRAMMAR : : : %s",production[i]);  
            non_terminal=production[i][0];  
            if(non_terminal==production[i][index]) {  
                 alpha=production[i][index+1];  
                 printf(" is left recursive.\n");  
                 while(production[i][index]!=0 && production[i][index]!='|')  
                      index++;  
                 if(production[i][index]!=0) {  
                      beta=production[i][index+1];  
                      printf("Grammar without left recursion:\n");  
                      printf("%c->%c%c\'",non_terminal,beta,non_terminal);  
                      printf("\n%c\'->%c%c\'|E\n",non_terminal,alpha,non_terminal);  
                 }  
                 else  
                      printf(" can't be reduced\n");  
            }  
            else  
                 printf(" is not left recursive.\n");  
            index=3;  
       }  
  }   

